apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.dmh.filesearch"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1000000
        versionName "1.0.0.0"
        resConfigs 'zh'
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationIdSuffix ".debug"
            dimension "default"
        }
        rs {
            dimension "default"
        }
    }

    signingConfigs {
        def keystoreFile = "local.properties"
        config {
            Properties prop = new Properties()
            prop.load(new FileInputStream(keystoreFile))
            storeFile = file(prop['jks.path'])
            keyAlias = prop['jks.alias']
            keyPassword = prop['jks.passwd']
            storePassword = prop['jks.storepw']
            v2SigningEnabled false
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // 重命名产出的apk文件
            File outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def prod = variant.productFlavors[0]
                if (variant.buildType.name == "release") {
                    File localPropertiesFile = project.rootProject.file('local.properties')
                    if (localPropertiesFile.exists()) {
                        Properties tempProp = new Properties()
                        InputStream inputStream = localPropertiesFile.newDataInputStream()
                        tempProp.load(inputStream)
                        if (tempProp.containsKey("apk.release.generate.dir")) {
                            variant.getPackageApplication().outputDirectory = new File(tempProp["apk.release.generate.dir"])
                        }
                    }
                    def time = new java.text.SimpleDateFormat("yyMMddHHmm").format(new Date())
                    outputFileName = "fs-${prod.name}-${defaultConfig.versionName}-${time}-release.apk".toLowerCase()
                } else {
                    outputFileName = "fs-${prod.name}-${defaultConfig.versionName}-debug.apk".toLowerCase()
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'com.google.android.material:material:+'
    implementation 'androidx.core:core-ktx:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}
